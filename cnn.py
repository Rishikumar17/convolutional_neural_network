# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xqQ6jVIXgI5AtuGYowFNlNNmaqOed79u
"""

# Load the Drive helper and mount
#from google.colab import drive

# This will prompt for authorization.
#drive.mount('/content/drive')

# !ls "/content/drive/My Drive/dataset/training_set/dogs"
# !ls -1 | wc -l "/content/drive/My Drive/dataset/training_set"

"""
Dataset folder structure
dataset
->training_set
 -->cats
   --->cat01.jpg.....
 -->dogs
   --->dog01.jpg.....
->tesing_set
 -->cats
   --->cat01.jpg.....
 -->dogs
   --->dog01.jpg.....
->single_prediction
"""

#Importing Libraries
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.models import model_from_yaml
from keras.layers import Flatten
from keras.layers import Dense
from keras.models import model_from_json
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
import numpy as np

#Initializing the neural network
classifier = Sequential()

#Adding the first convolutional layer
classifier.add(Conv2D(32,(3,3), input_shape=(64,64,3), activation='relu'))

#Adding the max pooling layer
classifier.add(MaxPooling2D(pool_size = (2,2)))

# Adding a second convolutional layer
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))

#Adding the flattening layer
classifier.add(Flatten())

#Adding the fully connected layer
classifier.add(Dense(units = 128, activation='relu'))
classifier.add(Dense(units = 1, activation='sigmoid'))

#Compiling the CNN
classifier.compile(optimizer = 'adam', loss='binary_crossentropy', metrics = ['accuracy'])

#Image Augmentation
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory(
        '/content/drive/My Drive/dataset/training_set', #path to your training set images 
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

testing_set = test_datagen.flow_from_directory(
        '/content/drive/My Drive/dataset/test_set', #path to your testing set images 
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

classifier.fit_generator(
        training_set,
        steps_per_epoch=2000,
        epochs=5,
        validation_data=testing_set,
        validation_steps=800)

#This part contains how to save a model(Optional)
#serialize model to JSON
model_json = classifier.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
#serialize weights to HDF5
classifier.save_weights("model.h5")
print("Saved model to disk")

# load json and create model
json_file = open('model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("model.h5")
print("Loaded model from disk")

# serialize model to YAML
model_yaml = classifier.to_yaml()
with open("model.yaml", "w") as yaml_file:
    yaml_file.write(model_yaml)
# serialize weights to HDF5
classifier.save_weights("model.h5")
print("Saved model to disk")
 
# later...
#This part contains how to load a model(Optional)
# load YAML and create model
yaml_file = open('model.yaml', 'r')
loaded_model_yaml = yaml_file.read()
yaml_file.close()
loaded_model = model_from_yaml(loaded_model_yaml)
# load weights into new model
loaded_model.load_weights("model.h5")
print("Loaded model from disk")

#Loading the test_image with the target size
test_image = image.load_img("/content/drive/My Drive/dataset/single_prediction/cat_or_dog_1.jpg", target_size=(64,64))
#converting the image in 3D array since it is an coloured image
test_image = image.img_to_array(test_image)
#Expanding the image array to 4D in which the batch size is also included
test_image = np.expand_dims(test_image, axis=0)
#Returns the class indices of the test_image
result = classifier.predict(test_image)
#Prints all the class indices and what each of them stands for
training_set.class_indices
#If-else block for easier display
if result[0][0] == 1:
  prediction = 'dog' #Since 1 stands for Dog
else:
  prediction = 'cat' #Since 0 stands for Cat

